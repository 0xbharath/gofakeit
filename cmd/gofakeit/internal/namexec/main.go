package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/ioutil"
	"os"
	"strings"

	"github.com/brianvoe/gofakeit/v4/cmd/gofakeit/internal"
)

var (
	output  = flag.String("o", "namexec_gen.go", "a path to the output")
	pkgName = flag.String("p", "", "a package name")
)

func main() {
	flag.Parse()

	args := flag.Args()
	if len(args) == 0 {
		args = []string{"."}
	}
	dir := args[0]

	name := *pkgName
	if name == "" {
		var err error
		name, err = pkgNameFromDir(dir)
		if err != nil {
			fmt.Fprintf(os.Stderr, "namexec: failed to get package name: %v", err)
			os.Exit(1)
		}
	}

	funcs, err := internal.ExportedFuncs(dir)
	if err != nil {
		fmt.Fprintf(os.Stderr, "namexec: failed to get exported functions: %v", err)
		os.Exit(1)
	}

	g := generator{
		pkgName: name,
	}
	g.Generate(funcs)
	if err := g.Save(*output); err != nil {
		fmt.Fprintf(os.Stderr, "namexec: failed to save to a file: %v", err)
		os.Exit(1)
	}
}

type generator struct {
	buf     bytes.Buffer
	pkgName string
}

func (g *generator) Generate(funcs []*ast.FuncDecl) {
	g.writeHeader()
	g.writeExecute(funcs)
}

func (g *generator) Save(path string) error {
	return ioutil.WriteFile(path, g.buf.Bytes(), 0644)
}

func (g *generator) printfln(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
	g.println()
}

func (g *generator) println() {
	fmt.Fprintf(&g.buf, "\n")
}

func (g *generator) writeHeader() {
	g.printfln(`// Code generated by "namexec %s"; DO NOT EDIT.`, strings.Join(os.Args[1:], " "))
	g.println()
	g.printfln(`package %s`, g.pkgName)
	g.println()
	g.printfln(`import (`)
	g.printfln(`	"github.com/brianvoe/gofakeit/v4"`)
	g.printfln(`)`)
	g.println()
}

func (g *generator) writeExecute(funcs []*ast.FuncDecl) {
	g.printfln(`func Execute(command string, args []string) string {`)
	g.printfln(`	switch command {`)
	for _, fun := range funcs {
		g.printfln(`	case "%s":`, fun.Name.Name)
		g.printfln(`		return gofakeit.%s()`, fun.Name.Name)
	}
	g.printfln(`	}`)
	g.printfln(`	return ""`)
	g.printfln(`}`)
}

func pkgNameFromDir(dir string) (string, error) {
	fs := token.NewFileSet()
	pkgs, err := parser.ParseDir(fs, dir, func(info os.FileInfo) bool {
		return !strings.HasSuffix(info.Name(), "_test.go")
	}, parser.PackageClauseOnly)
	if err != nil {
		return "", err
	}
	for _, pkg := range pkgs {
		return pkg.Name, nil
	}
	return "", fmt.Errorf(`no packages found in "%s"`, dir)
}
